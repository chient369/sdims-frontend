---
description: 
globs: 
alwaysApply: true
---
src/
  assets/           # Static assets (images, fonts, etc.)
  components/       # Shared components
    ui/             # Base UI components (Button, Input, Alert, Badge, etc.)
    layout/         # Layout components
    forms/          # Form-related components
    table/          # Table-related components
    modals/         # Modal-related components
    navigation/     # Navigation components
    notifications/  # Notification components
    files/          # File handling components
    charts/         # Chart and data visualization components
    auth/           # Authentication specific components
    examples/       # Example components for reference
  features/         # Feature-based modules
    auth/           # Authentication related
    dashboard/      # Dashboard related
    hrm/            # Human Resource Management
    margin/         # Margin Management
    contracts/      # Contract Management
    opportunities/  # Opportunity Management
    admin/          # Admin features
    reports/        # Reporting features
    errors/         # Error handling features
  hooks/            # Custom hooks
    useAuth.ts
    useClickOutside.ts
    useEmployees.ts
    useEscapeKey.ts
    useModalState.ts
    useOpportunities.ts
    usePermissions.tsx
  context/          # React context definitions
  services/         # API services
    core/           # Core service utilities
      axios.ts      # Axios instance and interceptors
      baseApi.ts    # Base API service class
      queryClient.ts# React Query configuration
      utils.ts      # API utility functions
    mock/           # Mock data services
  utils/            # Utility functions
  types/            # TypeScript type definitions
  config/           # Application configuration
  routes/           # Routing definitions
  store/            # State management (likely Zustand)
  providers/        # Provider components
  pages/            # Top-level pages
  tests/            # Test utilities and fixtures

  ---
  # Components Architecture

## Nguyên tắc tổ chức

Thư mục `components` được tổ chức theo các nguyên tắc sau:

1. **Thành phần UI Cơ bản** - `src/components/ui`:
   - Các thành phần UI cơ bản, tái sử dụng như Button, Input, Select, Modal, v.v.
   - Không phụ thuộc vào business logic.
   - Có thể được sử dụng ở bất kỳ đâu trong ứng dụng.

2. **Thành phần chuyên dụng** - `src/components/{component-name}`:
   - Các thành phần phức tạp hơn được tổ chức thành các thư mục riêng.
   - Ví dụ: `table`, `notifications`, `charts`, v.v.
   - Mỗi thư mục xuất các thành phần thông qua file `index.ts`.

3. **Layout** - `src/components/layout`:
   - Các thành phần định nghĩa cấu trúc bố cục của ứng dụng.
   - Bao gồm Page Layout, Sidebar, Header, Footer, v.v.

4. **Business Components** - `src/features/{feature-name}/components`:
   - Các thành phần dành riêng cho tính năng cụ thể.
   - Chứa business logic hoặc phụ thuộc vào các loại dữ liệu cụ thể của tính năng.

## Quy ước

1. **Imports**:
   - Import các thành phần UI cơ bản từ `src/components/ui`
   - Import các thành phần chuyên dụng từ thư mục tương ứng, ví dụ: `src/components/table`
   - Import các thành phần tính năng từ `src/features/{feature-name}/components`

2. **Exports**:
   - Mỗi thư mục nên có file `index.ts` xuất tất cả các thành phần công khai
   - Các thành phần không nên được xuất trực tiếp từ các tệp con